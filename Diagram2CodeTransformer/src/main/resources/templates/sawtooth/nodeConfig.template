#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

#
# Sawtooth -- Validator Configuration
#

# network and component.
bind = [
  "network:<!--validator.bind.network-->",
  "component:<!--validator.bind.component-->",
  "consensus:<!--validator.bind.consensus-->"
]
# starting.
peering = "<!--validator.peering-->"

# Advertised network endpoint URL.
endpoint = "<!--validator.endpoint-->"

# Uri(s) to connect to in order to initially connect to the validator network,
# in the format tcp://hostname:port. This is not needed in static peering mode
# and defaults to None. Replace host1 with the seed's hostname or IP address.
# seeds = <!--validator.seeds-->

# A list of peers to attempt to connect to in the format tcp://hostname:port.
# It defaults to None. Replace host1 with the peer's hostname or IP address.
peers = <!--validator.peers-->

# The type of scheduler to use. The choices are 'serial' or 'parallel'.
scheduler = '<!--validator.scheduler-->'

# A Curve ZMQ key pair are used to create a secured network based on side-band
# sharing of a single network key pair to all participating nodes.
# Note if the config file does not exist or these are not set, the network
# will default to being insecure.
#network_public_key = '<!--validator.network_public_key-->'
#network_private_key = '<!--validator.network_private_key-->'

# The minimum number of peers required before stopping peer search.
minimum_peer_connectivity = <!--validator.minimum_peer_connectivity-->

# The maximum number of peers that will be accepted.
maximum_peer_connectivity = <!--validator.maximum_peer_connectivity-->

# The following settings are for tuning the thread allocation in several of the
# thread pools used by the validator.  These settings should be modified by
# advanced users only.

# The maximum number of threads in the component worker pool
# component_thread_pool_workers = <!--validator.component_thread_pool_workers-->

# The maximum number of threads in the network worker pool
# network_thread_pool_workers = <!--validator.network_thread_pool_workers-->

# The maximum number of threads in the signature verification worker pool
# signature_thread_pool_workers = <!--validator.signature_thread_pool_workers-->

# The host and port for Open TSDB database used for metrics
# opentsdb_url = "<!--validator.opentsdb_url-->"

# The name of the database used for storing metrics
# opentsdb_db = "<!--validator.opentsdb_db-->"

# opentsdb_username = "<!--validator.opentsdb_username-->"

# opentsdb_password = "<!--validator.opentsdb_password-->"

# The type of authorization that must be performed for the different type of
# roles on the network. The different supported authorization types are "trust"
# and "challenge". The default is "trust".

# [roles]
# network = "<!--validator.network-->"

# Any off-chain transactor permission roles. The roles should match the roles
# stored in state for transactor permissioning. Due to the roles having . in the
# key, the key must be wrapped in quotes so toml can process it. The value
# should be the file name of a policy stored in the policy_dir.

# [permissions]
# transactor = "<!--"transactor"-->"
# "transactor.transaction_signer" = "<!--"transactor.transaction_signer"-->"